import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ Firebase)
interface User {
  uid: string;
  email: string | null;
  displayName: string | null;
  photoURL: string | null;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è —Ä–æ–ª–∏
interface UserData {
  uid: string;
  email: string | null;
  displayName: string | null;
  role: 'user' | 'organizer' | 'admin';
  photoURL?: string | null;
  profileCompleted: boolean;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
  nickname?: string | null;
  age?: number | null;
  height?: number | null;
  createdAt?: any;
}

interface AuthContextProps {
  currentUser: User | null;
  userData: UserData | null;
  loading: boolean;
  register: (email: string, password: string, displayName: string) => Promise<User | null>;
  login: (email: string, password: string) => Promise<User | null>;
  logout: () => Promise<void>;
  isAdmin: () => boolean;
  isOrganizer: () => boolean;
  authError: string | null;
  refreshUserData: () => Promise<void>;
}

const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(false);
  const [authError, setAuthError] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refreshUserData = async () => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –Ω–∞—á–∞–ª–æ');
    if (!currentUser) {
      console.log('‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
      const token = localStorage.getItem('authToken');
      if (!token) {
        console.log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
      }
      
      console.log('üîÑ –ó–∞–ø—Ä–æ—Å –∫ API /api/users/me —Å —Ç–æ–∫–µ–Ω–æ–º', token.substring(0, 15) + '...');
      
      // –ó–∞–ø—Ä–æ—Å –∫ API —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const response = await fetch(`http://localhost:5000/api/users/me`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const userData = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userDataObj: UserData = {
          uid: currentUser.uid,
          email: userData.email,
          displayName: userData.username,
          role: userData.role || 'user',
          photoURL: userData.profileImage || null,
          profileCompleted: true  // –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API
        };
        
        console.log('üñºÔ∏è –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ API:', userData.profileImage);
        console.log('üñºÔ∏è –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:', userDataObj.photoURL);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π photoURL –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const prevUserData = await JSON.parse(localStorage.getItem('userData') || '{}');
        console.log('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ:');
        console.log('   - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ:', prevUserData.photoURL);
        console.log('   - –ù–æ–≤–æ–µ:', userDataObj.photoURL);
        
        setUserData(userDataObj);
        localStorage.setItem('userData', JSON.stringify(userDataObj));
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', response.status);
        const errorText = await response.text();
        console.log('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ø–µ—Ä–µ–¥–µ–ª–∫–∞ —Å –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ API
  const register = async (email: string, password: string, displayName: string) => {
    setAuthError(null);

    try {
      setLoading(true);
      
      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL –∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
      const response = await fetch('http://localhost:5000/api/users/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username: displayName, // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–µ –∫–∞–∫ —Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç API
          email,
          password
        }),
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.msg || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const { token } = await response.json();
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const decoded = parseJwt(token);
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
      const newUser: User = {
        uid: decoded.user.id,
        email: email,
        displayName: displayName,
        photoURL: null
      };
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUserData: UserData = {
        uid: newUser.uid,
        email: newUser.email,
        displayName: newUser.displayName,
        role: decoded.user.role || 'user',
        photoURL: newUser.photoURL,
        profileCompleted: false
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      localStorage.setItem('authToken', token);
      localStorage.setItem('currentUser', JSON.stringify(newUser));
      localStorage.setItem('userData', JSON.stringify(newUserData));
      
      setCurrentUser(newUser);
      setUserData(newUserData);
      
      return newUser;
    } catch (error) {
      setAuthError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      return null;
    } finally {
      setLoading(false);
    }
  };

  // –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
  const parseJwt = (token: string) => {
    try {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      const jsonPayload = decodeURIComponent(
        atob(base64)
          .split('')
          .map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
          })
          .join('')
      );
      return JSON.parse(jsonPayload);
    } catch (e) {
      return {};
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API call
  const login = async (email: string, password: string) => {
    setAuthError(null);

    try {
      setLoading(true);
      
      const response = await fetch('http://localhost:5000/api/users/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          password
        }),
      });
      
      // –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
      const responseText = await response.text();
      
      // –ü–æ—Ç–æ–º –ø—Ä–æ–±—É–µ–º –µ–≥–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      let data;
      try {
        data = responseText ? JSON.parse(responseText) : {};
      } catch (e) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
      if (!response.ok) {
        const errorMessage = data.msg || '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
        throw new Error(errorMessage);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ
      if (!data.token) {
        throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      localStorage.setItem('authToken', data.token);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      try {
        const decoded = parseJwt(data.token);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userResponse = await fetch('http://localhost:5000/api/users/me', {
          headers: {
            'Authorization': `Bearer ${data.token}`
          }
        });
        
        if (!userResponse.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        const userData = await userResponse.json();
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = {
          uid: decoded.user.id,
          email: userData.email,
          displayName: userData.username,
          photoURL: userData.profileImage || null
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.setItem('currentUser', JSON.stringify(user));
        setCurrentUser(user);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userData
        const userDataObj = {
          uid: user.uid,
          email: user.email,
          displayName: user.displayName,
          role: decoded.user.role || 'user',
          photoURL: user.photoURL,
          profileCompleted: true
        };
        
        localStorage.setItem('userData', JSON.stringify(userDataObj));
        setUserData(userDataObj);
        
        return user;
      } catch (userError) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞');
      }
    } catch (error) {
      setAuthError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
  const logout = async () => {
    setLoading(true);
    await new Promise(resolve => setTimeout(resolve, 500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    localStorage.removeItem('currentUser');
    localStorage.removeItem('userData');
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setCurrentUser(null);
    setUserData(null);
    setLoading(false);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const savedUser = localStorage.getItem('currentUser');
    const savedUserData = localStorage.getItem('userData');
    
    if (savedUser && savedUserData) {
      setCurrentUser(JSON.parse(savedUser));
      setUserData(JSON.parse(savedUserData));
    } else {
      // –£–¥–∞–ª—è–µ–º console.log
    }
    
    setLoading(false);
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const isAdmin = () => {
    return userData?.role === 'admin';
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
  const isOrganizer = () => {
    return userData?.role === 'organizer' || userData?.role === 'admin';
  };

  const value: AuthContextProps = {
    currentUser,
    userData,
    loading,
    register,
    login,
    logout,
    isAdmin,
    isOrganizer,
    authError,
    refreshUserData
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
}; 